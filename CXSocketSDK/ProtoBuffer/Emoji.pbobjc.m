// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Emoji.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Emoji.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EmojiRoot

@implementation EmojiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - EmojiRoot_FileDescriptor

static GPBFileDescriptor *EmojiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum UpStreamMessageType

GPBEnumDescriptor *UpStreamMessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EmojiRequest\000EmojiAck\000";
    static const int32_t values[] = {
        UpStreamMessageType_EmojiRequest,
        UpStreamMessageType_EmojiAck,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UpStreamMessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UpStreamMessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UpStreamMessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UpStreamMessageType_EmojiRequest:
    case UpStreamMessageType_EmojiAck:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UpStreamMessage

@implementation UpStreamMessage

@dynamic productLine;
@dynamic type;
@dynamic body;
@dynamic upstreamTime;

typedef struct UpStreamMessage__storage_ {
  uint32_t _has_storage_[1];
  UpStreamMessageType type;
  NSString *productLine;
  NSString *body;
  int64_t upstreamTime;
} UpStreamMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productLine",
        .dataTypeSpecific.className = NULL,
        .number = UpStreamMessage_FieldNumber_ProductLine,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpStreamMessage__storage_, productLine),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = UpStreamMessageType_EnumDescriptor,
        .number = UpStreamMessage_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpStreamMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = UpStreamMessage_FieldNumber_Body,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpStreamMessage__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "upstreamTime",
        .dataTypeSpecific.className = NULL,
        .number = UpStreamMessage_FieldNumber_UpstreamTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpStreamMessage__storage_, upstreamTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpStreamMessage class]
                                     rootClass:[EmojiRoot class]
                                          file:EmojiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpStreamMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpStreamMessage_Type_RawValue(UpStreamMessage *message) {
  GPBDescriptor *descriptor = [UpStreamMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpStreamMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetUpStreamMessage_Type_RawValue(UpStreamMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [UpStreamMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpStreamMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
